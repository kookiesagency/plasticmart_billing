-- Create the activity_logs table to store audit trails
CREATE TABLE public.activity_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ DEFAULT now() NOT NULL,
  user_email TEXT, -- We'll store email for now, will be linked to auth.users later
  action TEXT NOT NULL,
  target_table TEXT,
  target_id TEXT,
  details JSONB
);

-- Enable RLS
ALTER TABLE public.activity_logs ENABLE ROW LEVEL SECURITY;

-- Create policy for authenticated users to view logs
CREATE POLICY "Allow authenticated users to read logs"
ON public.activity_logs
FOR SELECT
TO authenticated
USING (true);


-- Create a function that will be triggered on data changes
CREATE OR REPLACE FUNCTION public.fn_record_activity()
RETURNS TRIGGER AS $$
DECLARE
  log_details JSONB;
  user_email_from_auth TEXT;
BEGIN
  -- Attempt to get user email if available from a session
  -- This is a fallback until full auth is integrated
  BEGIN
    user_email_from_auth := (SELECT u.email FROM auth.users u WHERE u.id = auth.uid());
  EXCEPTION WHEN others THEN
    user_email_from_auth := 'System Action';
  END;

  -- Build the details JSON based on the operation
  IF (TG_OP = 'INSERT') THEN
    log_details := jsonb_build_object('new_data', to_jsonb(NEW));
  ELSIF (TG_OP = 'UPDATE') THEN
    log_details := jsonb_build_object('new_data', to_jsonb(NEW), 'old_data', to_jsonb(OLD));
  ELSIF (TG_OP = 'DELETE') THEN
    log_details := jsonb_build_object('old_data', to_jsonb(OLD));
  END IF;

  -- Insert into activity_logs
  INSERT INTO public.activity_logs (user_email, action, target_table, target_id, details)
  VALUES (
    user_email_from_auth,
    TG_OP,
    TG_TABLE_NAME,
    CASE TG_OP
      WHEN 'INSERT' THEN NEW.id::text
      WHEN 'UPDATE' THEN NEW.id::text
      WHEN 'DELETE' THEN OLD.id::text
    END,
    log_details
  );

  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;


-- Create triggers for each table we want to track

-- Parties
CREATE TRIGGER on_parties_activity
AFTER INSERT OR UPDATE OR DELETE ON public.parties
FOR EACH ROW EXECUTE FUNCTION public.fn_record_activity();

-- Items
CREATE TRIGGER on_items_activity
AFTER INSERT OR UPDATE OR DELETE ON public.items
FOR EACH ROW EXECUTE FUNCTION public.fn_record_activity();

-- Invoices
CREATE TRIGGER on_invoices_activity
AFTER INSERT OR UPDATE OR DELETE ON public.invoices
FOR EACH ROW EXECUTE FUNCTION public.fn_record_activity();

-- Units
CREATE TRIGGER on_units_activity
AFTER INSERT OR UPDATE OR DELETE ON public.units
FOR EACH ROW EXECUTE FUNCTION public.fn_record_activity();

-- Payments
CREATE TRIGGER on_payments_activity
AFTER INSERT OR UPDATE OR DELETE ON public.payments
FOR EACH ROW EXECUTE FUNCTION public.fn_record_activity(); 